{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":36,"column":0},"end":{"row":52,"column":116},"action":"remove","lines":["","","","# @app.route('/edit_task/<task_id>')","# def edit_task(task_id):","#     the_task =  mongo.db.tasks.find_one({\"_id\": ObjectId(task_id)})","#     all_categories =  mongo.db.categories.find()","#     return render_template('edittask.html', task=the_task,","#                           categories=all_categories)","                           ","# #selects a recipe and retreives from the database using its id and displays it in a form to allow the user to edit its properties","# @app.route('/edit_recipe/<recipe_id>')","# def edit_recipe(recipe_id):","#     courses = mongo.db.course.find()","#     #get the recipe that matches the recipe id '_id' is the key ","#     recipe = mongo.db.recipes.find_one({'_id':ObjectId(recipe_id)})","#     return render_template(\"editrecipe.html\", recipe=recipe, courses=courses, allergens=mongo.db.allergens.find())"],"id":229},{"start":{"row":35,"column":4},"end":{"row":36,"column":0},"action":"remove","lines":["",""]},{"start":{"row":35,"column":0},"end":{"row":35,"column":4},"action":"remove","lines":["    "]},{"start":{"row":34,"column":48},"end":{"row":35,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["",""],"id":230},{"start":{"row":35,"column":0},"end":{"row":36,"column":0},"action":"remove","lines":["",""]},{"start":{"row":34,"column":48},"end":{"row":35,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":34,"column":48},"end":{"row":35,"column":0},"action":"remove","lines":["",""],"id":231}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":23},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","","app = Flask(__name__)","","app.config[\"MONGO_DBNAME\"] = 'go_playground'","app.config[\"MONGO_URI\"] = os.getenv(\"MONGO_URI\")","","#creating new instance of PyMongo and adding the app object with constructor method","mongo = PyMongo(app)","","@app.route('/')","@app.route('/find_playground')","def find_playground():","    return render_template(\"playground.html\", ","                            playgrounds = mongo.db.playgrounds.find())","    ","# @app.route('/add_playground')","# def add_playground():","#     _boroughs = mongo.db.boroughs.find()","#     borough_list = [borough for borough in _boroughs]","#     return render_template(\"addplayground.html\", boroughs = borough_list) ","                            ","@app.route('/add_playground')","def add_playground():","    return render_template(\"addplayground.html\", ","                            boroughs = mongo.db.boroughs.find()) ","                            ","@app.route('/insert_playground', methods=['POST'])","def insert_playground():","    playgrounds = mongo.db.tasks","    playgrounds.insert_one(request.form.to_dict())","    return redirect(url_for('show_playground')) ","","@app.route('/show_playground')","def show_playground():","    return render_template(\"showplayground.html\", ","                            playgrounds = mongo.db.playgrounds.find())","","# browse playground function","# @app.route('/')","# @app.route('/browse_playground', methods=[\"GET\", \"POST\"])","# def browse_playground():","#  borough_name = mongo.db.playgrounds.find(), playground_name = mongo.db.playgrounds.find()","# if request.method == \"POST\":","#     return render_template('browseplayground.html', ","#                             playgrounds = mongo.db.playgrounds.find())","","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"],"id":232},{"start":{"row":0,"column":0},"end":{"row":46,"column":23},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","","app = Flask(__name__)","","app.config[\"MONGO_DBNAME\"] = 'go_playground'","app.config[\"MONGO_URI\"] = os.getenv(\"MONGO_URI\")","","#creating new instance of PyMongo and adding the app object with constructor method","mongo = PyMongo(app)","","@app.route('/')","@app.route('/find_playground')","def find_playground():","    return render_template(\"playground.html\", ","                            playgrounds = mongo.db.playgrounds.find())","    ","# @app.route('/add_playground')","# def add_playground():","#     _boroughs = mongo.db.boroughs.find()","#     borough_list = [borough for borough in _boroughs]","#     return render_template(\"addplayground.html\", boroughs = borough_list) ","                            ","@app.route('/add_playground')","def add_playground():","    return render_template(\"addplayground.html\", ","                            boroughs = mongo.db.boroughs.find()) ","                            ","@app.route('/insert_playground', methods=['POST'])","def insert_playground():","    playgrounds = mongo.db.tasks","    playgrounds.insert_one(request.form.to_dict())","    return redirect(url_for('show_playground'))                            ","","","    ","@app.route('/show_playground')","def show_playground():","    return render_template(\"showplayground.html\", ","                            playgrounds = mongo.db.playgrounds.find())","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"]}]]},"ace":{"folds":[],"scrolltop":628.5,"scrollleft":0,"selection":{"start":{"row":46,"column":23},"end":{"row":46,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1587534887750,"hash":"ccb7d6dc498068f106c95fa846a81d0305f33d9b"}